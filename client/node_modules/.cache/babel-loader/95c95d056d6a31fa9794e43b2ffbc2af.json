{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/pages/AccountView/General/GeneralSettings.js\";\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport { Box, Button, Card, CardContent, CardHeader, Divider, FormHelperText, Grid, Switch, TextField, Typography, makeStyles } from '@material-ui/core';\nimport { updateProfile } from 'src/actions/accountActions';\nvar stateOptions = ['Alabama', 'New York', 'San Francisco'];\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nfunction GeneralSettings(_ref) {\n  var _this = this;\n\n  var user = _ref.user,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"user\", \"className\"]);\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      canHire: user.canHire,\n      country: user.country,\n      email: user.email,\n      firstName: user.firstName,\n      isPublic: user.isPublic,\n      lastName: user.lastName,\n      phone: user.phone,\n      state: user.state\n    },\n    validationSchema: Yup.object().shape({\n      country: Yup.string().max(255).required('Country is required'),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      firstName: Yup.string().max(255).required('First name is required'),\n      lastName: Yup.string().max(255).required('Last name is required')\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var resetForm, setErrors, setStatus, setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm, setErrors = _ref2.setErrors, setStatus = _ref2.setStatus, setSubmitting = _ref2.setSubmitting;\n                _context.prev = 1;\n                _context.next = 4;\n                return dispatch(updateProfile(values));\n\n              case 4:\n                resetForm();\n                setStatus({\n                  success: true\n                });\n                enqueueSnackbar('Profile updated', {\n                  variant: 'success'\n                });\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                setStatus({\n                  success: false\n                });\n                setErrors({\n                  submit: _context.t0.message\n                });\n\n              case 13:\n                _context.prev = 13;\n                setSubmitting(false);\n                return _context.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 9, 13, 16]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var errors = _ref4.errors,\n        handleBlur = _ref4.handleBlur,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting,\n        touched = _ref4.touched,\n        values = _ref4.values;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, Object.assign({\n      className: clsx(classes.root, className)\n    }, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CardHeader, {\n      title: \"Profile\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.firstName && errors.firstName),\n      fullWidth: true,\n      helperText: touched.firstName && errors.firstName,\n      label: \"First Name\",\n      name: \"firstName\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      type: \"firstName\",\n      value: values.firstName,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.lastName && errors.lastName),\n      fullWidth: true,\n      helperText: touched.lastName && errors.lastName,\n      label: \"Last Name\",\n      name: \"lastName\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      type: \"lastName\",\n      value: values.lastName,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.email && errors.email),\n      fullWidth: true,\n      helperText: touched.email && errors.email ? errors.email : 'We will use this email to contact you',\n      label: \"Email Address\",\n      name: \"email\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      type: \"email\",\n      value: values.email,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.phone && errors.phone),\n      fullWidth: true,\n      helperText: touched.phone && errors.phone,\n      label: \"Phone Number\",\n      name: \"phone\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.phone,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Select State\",\n      name: \"state\",\n      onChange: handleChange,\n      select: true,\n      SelectProps: {\n        native: true\n      },\n      value: values.state,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }, stateOptions.map(function (state) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: state,\n        value: state,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 23\n        }\n      }, state);\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.country && errors.country),\n      fullWidth: true,\n      helperText: touched.country && errors.country,\n      label: \"Country\",\n      name: \"country\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      type: \"country\",\n      value: values.country,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"textPrimary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 19\n      }\n    }, \"Make Contact Info Public\"), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }, \"Means that anyone viewing your profile will be able to see your contacts details\"), /*#__PURE__*/React.createElement(Switch, {\n      checked: values.isPublic,\n      edge: \"start\",\n      name: \"isPublic\",\n      onChange: handleChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"textPrimary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 19\n      }\n    }, \"Available to hire\"), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 19\n      }\n    }, \"Toggling this will let your teammates know that you are available for acquiring new projects\"), /*#__PURE__*/React.createElement(Switch, {\n      checked: values.canHire,\n      edge: \"start\",\n      name: \"canHire\",\n      onChange: handleChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 19\n      }\n    }))), errors.submit && /*#__PURE__*/React.createElement(Box, {\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormHelperText, {\n      error: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 19\n      }\n    }, errors.submit))), /*#__PURE__*/React.createElement(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      p: 2,\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      disabled: isSubmitting,\n      type: \"submit\",\n      variant: \"contained\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 15\n      }\n    }, \"Save Changes\"))));\n  });\n}\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\nexport default GeneralSettings;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/pages/AccountView/General/GeneralSettings.js"],"names":["React","useDispatch","clsx","PropTypes","Yup","Formik","useSnackbar","Box","Button","Card","CardContent","CardHeader","Divider","FormHelperText","Grid","Switch","TextField","Typography","makeStyles","updateProfile","stateOptions","useStyles","root","GeneralSettings","user","className","rest","classes","dispatch","enqueueSnackbar","canHire","country","email","firstName","isPublic","lastName","phone","state","object","shape","string","max","required","values","resetForm","setErrors","setStatus","setSubmitting","success","variant","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","native","map","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  FormHelperText,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport { updateProfile } from 'src/actions/accountActions';\n\nconst stateOptions = ['Alabama', 'New York', 'San Francisco'];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction GeneralSettings({ user, className, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        canHire: user.canHire,\n        country: user.country,\n        email: user.email,\n        firstName: user.firstName,\n        isPublic: user.isPublic,\n        lastName: user.lastName,\n        phone: user.phone,\n        state: user.state,\n      }}\n      validationSchema={Yup.object().shape({\n        country: Yup.string().max(255).required('Country is required'),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        firstName: Yup.string().max(255).required('First name is required'),\n        lastName: Yup.string().max(255).required('Last name is required')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await dispatch(updateProfile(values));\n          resetForm();\n          setStatus({ success: true });\n          enqueueSnackbar('Profile updated', {\n            variant: 'success'\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n        } finally {\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Card\n            className={clsx(classes.root, className)}\n            {...rest}\n          >\n            <CardHeader title=\"Profile\" />\n            <Divider />\n            <CardContent>\n              <Grid\n                container\n                spacing={4}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.firstName && errors.firstName)}\n                    fullWidth\n                    helperText={touched.firstName && errors.firstName}\n                    label=\"First Name\"\n                    name=\"firstName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"firstName\"\n                    value={values.firstName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.lastName && errors.lastName)}\n                    fullWidth\n                    helperText={touched.lastName && errors.lastName}\n                    label=\"Last Name\"\n                    name=\"lastName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"lastName\"\n                    value={values.lastName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email ? errors.email : 'We will use this email to contact you'}\n                    label=\"Email Address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone Number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    fullWidth\n                    label=\"Select State\"\n                    name=\"state\"\n                    onChange={handleChange}\n                    select\n                    SelectProps={{ native: true }}\n                    value={values.state}\n                    variant=\"outlined\"\n                  >\n                    {stateOptions.map((state) => (\n                      <option\n                        key={state}\n                        value={state}\n                      >\n                        {state}\n                      </option>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    type=\"country\"\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    color=\"textPrimary\"\n                  >\n                    Make Contact Info Public\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Means that anyone viewing your profile will be able to see your\n                    contacts details\n                  </Typography>\n                  <Switch\n                    checked={values.isPublic}\n                    edge=\"start\"\n                    name=\"isPublic\"\n                    onChange={handleChange}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    color=\"textPrimary\"\n                  >\n                    Available to hire\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Toggling this will let your teammates know that you are available\n                    for acquiring new projects\n                  </Typography>\n                  <Switch\n                    checked={values.canHire}\n                    edge=\"start\"\n                    name=\"canHire\"\n                    onChange={handleChange}\n                  />\n                </Grid>\n              </Grid>\n              {errors.submit && (\n                <Box mt={3}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n            </CardContent>\n            <Divider />\n            <Box\n              p={2}\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n            >\n              <Button\n                color=\"secondary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Save Changes\n              </Button>\n            </Box>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object.isRequired\n};\n\nexport default GeneralSettings;\n"]},"metadata":{},"sourceType":"module"}