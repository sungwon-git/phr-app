{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/pages/AccountView/Security.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport { Box, Button, Card, CardContent, CardHeader, Divider, FormHelperText, Grid, TextField, makeStyles } from '@material-ui/core';\nimport wait from 'src/utils/wait';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nfunction Security(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      password: '',\n      passwordConfirm: ''\n    },\n    validationSchema: Yup.object().shape({\n      password: Yup.string().min(7, 'Must be at least 7 characters').max(255).required('Required'),\n      passwordConfirm: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required')\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var resetForm, setErrors, setStatus, setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm, setErrors = _ref2.setErrors, setStatus = _ref2.setStatus, setSubmitting = _ref2.setSubmitting;\n                _context.prev = 1;\n                _context.next = 4;\n                return wait(500);\n\n              case 4:\n                resetForm();\n                setStatus({\n                  success: true\n                });\n                setSubmitting(false);\n                enqueueSnackbar('Password updated', {\n                  variant: 'success'\n                });\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                setStatus({\n                  success: false\n                });\n                setErrors({\n                  submit: _context.t0.message\n                });\n                setSubmitting(false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var errors = _ref4.errors,\n        handleBlur = _ref4.handleBlur,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting,\n        touched = _ref4.touched,\n        values = _ref4.values;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card, Object.assign({\n      className: clsx(classes.root, className)\n    }, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CardHeader, {\n      title: \"Change Password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 4,\n      sm: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.password && errors.password),\n      fullWidth: true,\n      helperText: touched.password && errors.password,\n      label: \"Password\",\n      name: \"password\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      type: \"password\",\n      value: values.password,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 4,\n      sm: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.passwordConfirm && errors.passwordConfirm),\n      fullWidth: true,\n      helperText: touched.passwordConfirm && errors.passwordConfirm,\n      label: \"Password Confirmation\",\n      name: \"passwordConfirm\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      type: \"password\",\n      value: values.passwordConfirm,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }))), errors.submit && /*#__PURE__*/React.createElement(Box, {\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormHelperText, {\n      error: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }\n    }, errors.submit))), /*#__PURE__*/React.createElement(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      p: 2,\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      disabled: isSubmitting,\n      type: \"submit\",\n      variant: \"contained\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, \"Change Password\"))));\n  });\n}\n\nSecurity.propTypes = {\n  className: PropTypes.string\n};\nexport default Security;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/pages/AccountView/Security.js"],"names":["React","PropTypes","clsx","Yup","Formik","useSnackbar","Box","Button","Card","CardContent","CardHeader","Divider","FormHelperText","Grid","TextField","makeStyles","wait","useStyles","root","Security","className","rest","classes","enqueueSnackbar","password","passwordConfirm","object","shape","string","min","max","required","oneOf","ref","values","resetForm","setErrors","setStatus","setSubmitting","success","variant","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  FormHelperText,\n  Grid,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Security({ className, ...rest }) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        passwordConfirm: ''\n      }}\n      validationSchema={Yup.object().shape({\n        password: Yup.string()\n          .min(7, 'Must be at least 7 characters')\n          .max(255)\n          .required('Required'),\n        passwordConfirm: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Required')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          await wait(500);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Password updated', {\n            variant: 'success'\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Card\n            className={clsx(classes.root, className)}\n            {...rest}\n          >\n            <CardHeader title=\"Change Password\" />\n            <Divider />\n            <CardContent>\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={4}\n                  sm={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.password && errors.password)}\n                    fullWidth\n                    helperText={touched.password && errors.password}\n                    label=\"Password\"\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={4}\n                  sm={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.passwordConfirm && errors.passwordConfirm)}\n                    fullWidth\n                    helperText={touched.passwordConfirm && errors.passwordConfirm}\n                    label=\"Password Confirmation\"\n                    name=\"passwordConfirm\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.passwordConfirm}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n              {errors.submit && (\n                <Box mt={3}>\n                  <FormHelperText error>\n                    {errors.submit}\n                  </FormHelperText>\n                </Box>\n              )}\n            </CardContent>\n            <Divider />\n            <Box\n              p={2}\n              display=\"flex\"\n              justifyContent=\"flex-end\"\n            >\n              <Button\n                color=\"secondary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Change Password\n              </Button>\n            </Box>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nSecurity.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Security;\n"]},"metadata":{},"sourceType":"module"}