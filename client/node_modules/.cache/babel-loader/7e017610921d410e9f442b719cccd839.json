{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/management/CustomerEditView/CustomerEditForm.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport { Box, Button, Card, CardContent, Grid, Switch, TextField, Typography, makeStyles } from '@material-ui/core';\nimport wait from 'src/utils/wait';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nfunction CustomerEditForm(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      customer = _ref.customer,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"customer\"]);\n\n  var classes = useStyles();\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      address1: customer.address1 || '',\n      address2: customer.address2 || '',\n      country: customer.country || '',\n      discountedPrices: customer.discountedPrices || false,\n      email: customer.email || '',\n      fullName: customer.fullName || '',\n      phone: customer.phone || '',\n      state: customer.state || '',\n      verified: customer.verified || false\n    },\n    validationSchema: Yup.object().shape({\n      address1: Yup.string().max(255),\n      address2: Yup.string().max(255),\n      country: Yup.string().max(255),\n      discountedPrices: Yup.bool(),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      fullName: Yup.string().max(255).required('Name is required'),\n      phone: Yup.string().max(15),\n      state: Yup.string().max(255),\n      verified: Yup.bool()\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var resetForm, setErrors, setStatus, setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm, setErrors = _ref2.setErrors, setStatus = _ref2.setStatus, setSubmitting = _ref2.setSubmitting;\n                _context.prev = 1;\n                _context.next = 4;\n                return wait(500);\n\n              case 4:\n                resetForm();\n                setStatus({\n                  success: true\n                });\n                setSubmitting(false);\n                enqueueSnackbar('Customer updated', {\n                  variant: 'success',\n                  action: /*#__PURE__*/React.createElement(Button, {\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 21\n                    }\n                  }, \"See all\")\n                });\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                setStatus({\n                  success: false\n                });\n                setErrors({\n                  submit: _context.t0.message\n                });\n                setSubmitting(false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var errors = _ref4.errors,\n        handleBlur = _ref4.handleBlur,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting,\n        touched = _ref4.touched,\n        values = _ref4.values;\n    return /*#__PURE__*/React.createElement(\"form\", Object.assign({\n      className: clsx(classes.root, className),\n      onSubmit: handleSubmit\n    }, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.email && errors.email),\n      fullWidth: true,\n      helperText: touched.email && errors.email,\n      label: \"Email address\",\n      name: \"email\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      value: values.email,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.fullName && errors.fullName),\n      fullWidth: true,\n      helperText: touched.fullName && errors.fullName,\n      label: \"Full name\",\n      name: \"fullName\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      required: true,\n      value: values.fullName,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.phone && errors.phone),\n      fullWidth: true,\n      helperText: touched.phone && errors.phone,\n      label: \"Phone number\",\n      name: \"phone\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.phone,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.state && errors.state),\n      fullWidth: true,\n      helperText: touched.state && errors.state,\n      label: \"State/Region\",\n      name: \"state\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.state,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.country && errors.country),\n      fullWidth: true,\n      helperText: touched.country && errors.country,\n      label: \"Country\",\n      name: \"country\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.country,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.address1 && errors.address1),\n      fullWidth: true,\n      helperText: touched.address1 && errors.address1,\n      label: \"Address 1\",\n      name: \"address1\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.address1,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: Boolean(touched.address2 && errors.address2),\n      fullWidth: true,\n      helperText: touched.address2 && errors.address2,\n      label: \"Address 2\",\n      name: \"address2\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      value: values.address2,\n      variant: \"outlined\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      color: \"textPrimary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 19\n      }\n    }, \"Email Verified\"), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 19\n      }\n    }, \"Disabling this will automatically send the user a verification email\"), /*#__PURE__*/React.createElement(Switch, {\n      checked: values.verified,\n      color: \"secondary\",\n      edge: \"start\",\n      name: \"verified\",\n      onChange: handleChange,\n      value: values.verified,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      md: 6,\n      xs: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      color: \"textPrimary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 19\n      }\n    }, \"Discounted Prices\"), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 19\n      }\n    }, \"This will give the user discountedprices for all products\"), /*#__PURE__*/React.createElement(Switch, {\n      checked: values.discountedPrices,\n      color: \"secondary\",\n      edge: \"start\",\n      name: \"discountedPrices\",\n      onChange: handleChange,\n      value: values.discountedPrices,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Box, {\n      mt: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }, \"Update Customer\")))));\n  });\n}\n\nCustomerEditForm.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\nexport default CustomerEditForm;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/management/CustomerEditView/CustomerEditForm.js"],"names":["React","PropTypes","clsx","Yup","Formik","useSnackbar","Box","Button","Card","CardContent","Grid","Switch","TextField","Typography","makeStyles","wait","useStyles","root","CustomerEditForm","className","customer","rest","classes","enqueueSnackbar","address1","address2","country","discountedPrices","email","fullName","phone","state","verified","object","shape","string","max","bool","required","values","resetForm","setErrors","setStatus","setSubmitting","success","variant","action","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction CustomerEditForm({\n  className,\n  customer,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      initialValues={{\n        address1: customer.address1 || '',\n        address2: customer.address2 || '',\n        country: customer.country || '',\n        discountedPrices: customer.discountedPrices || false,\n        email: customer.email || '',\n        fullName: customer.fullName || '',\n        phone: customer.phone || '',\n        state: customer.state || '',\n        verified: customer.verified || false\n      }}\n      validationSchema={Yup.object().shape({\n        address1: Yup.string().max(255),\n        address2: Yup.string().max(255),\n        country: Yup.string().max(255),\n        discountedPrices: Yup.bool(),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        fullName: Yup.string().max(255).required('Name is required'),\n        phone: Yup.string().max(15),\n        state: Yup.string().max(255),\n        verified: Yup.bool()\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          await wait(500);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Customer updated', {\n            variant: 'success',\n            action: <Button>See all</Button>\n          });\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n\n          <Card>\n            <CardContent>\n\n              <Grid\n                container\n                spacing={3}\n              >\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.fullName && errors.fullName)}\n                    fullWidth\n                    helperText={touched.fullName && errors.fullName}\n                    label=\"Full name\"\n                    name=\"fullName\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.fullName}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.phone && errors.phone)}\n                    fullWidth\n                    helperText={touched.phone && errors.phone}\n                    label=\"Phone number\"\n                    name=\"phone\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.state && errors.state)}\n                    fullWidth\n                    helperText={touched.state && errors.state}\n                    label=\"State/Region\"\n                    name=\"state\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.state}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.country && errors.country)}\n                    fullWidth\n                    helperText={touched.country && errors.country}\n                    label=\"Country\"\n                    name=\"country\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.country}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address1 && errors.address1)}\n                    fullWidth\n                    helperText={touched.address1 && errors.address1}\n                    label=\"Address 1\"\n                    name=\"address1\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address1}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    error={Boolean(touched.address2 && errors.address2)}\n                    fullWidth\n                    helperText={touched.address2 && errors.address2}\n                    label=\"Address 2\"\n                    name=\"address2\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.address2}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item />\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Email Verified\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    Disabling this will automatically send the user a verification\n                    email\n                  </Typography>\n                  <Switch\n                    checked={values.verified}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"verified\"\n                    onChange={handleChange}\n                    value={values.verified}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <Typography\n                    variant=\"h5\"\n                    color=\"textPrimary\"\n                  >\n                    Discounted Prices\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    This will give the user discountedprices for all products\n                  </Typography>\n                  <Switch\n                    checked={values.discountedPrices}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"discountedPrices\"\n                    onChange={handleChange}\n                    value={values.discountedPrices}\n                  />\n                </Grid>\n              </Grid>\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                >\n                  Update Customer\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nCustomerEditForm.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n};\n\nexport default CustomerEditForm;\n"]},"metadata":{},"sourceType":"module"}