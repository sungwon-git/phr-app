{"ast":null,"code":"import _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from 'src/utils/mock';\nvar JWT_SECRET = 'devias-top-secret-key';\nvar JWT_EXPIRES_IN = '2 days';\nvar db = {\n  user: {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/images/avatars/avatar_6.png',\n    bio: 'Sales Manager',\n    canHire: false,\n    country: 'USA',\n    email: 'katarina.smith@devias.io',\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Katarina',\n    isPublic: true,\n    lastName: 'Smith',\n    phone: '+40 777666555',\n    role: 'admin',\n    state: 'New York',\n    timezone: '4:32PM (GMT-4)'\n  }\n};\nmock.onPost('/api/account/login').reply(function (config) {\n  var _JSON$parse = JSON.parse(config.data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n\n  if (email !== 'admin@devias.io' || password !== 'admin') {\n    return [400, {\n      message: 'Please check your email and password'\n    }];\n  }\n\n  var user = db.user;\n  var accessToken = jwt.sign({\n    id: user.id\n  }, JWT_SECRET, {\n    expiresIn: JWT_EXPIRES_IN\n  });\n  return [200, {\n    user: user,\n    accessToken: accessToken\n  }];\n});\nmock.onGet('/api/account/me').reply(function (config) {\n  var Authorization = config.headers.Authorization;\n\n  if (!Authorization) {\n    return [401, {\n      message: 'Authorization token missing'\n    }];\n  }\n\n  try {\n    var accessToken = Authorization.split(' ')[1];\n\n    var _jwt$verify = jwt.verify(accessToken, JWT_SECRET),\n        id = _jwt$verify.id;\n\n    if (id !== db.user.id) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user: db.user\n    }];\n  } catch (error) {\n    return [401, {\n      message: 'Invalid authorization token'\n    }];\n  }\n});\nmock.onPost('/api/account/profile').reply(function (request) {\n  var _JSON$parse2 = JSON.parse(request.data),\n      update = _JSON$parse2.update;\n\n  _.assign(db.user, update);\n\n  return [200, {\n    user: db.user\n  }];\n});\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Freelancer',\n    price: '5',\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/mock/accountMock.js"],"names":["_","jwt","mock","JWT_SECRET","JWT_EXPIRES_IN","db","user","id","avatar","bio","canHire","country","email","username","password","firstName","isPublic","lastName","phone","role","state","timezone","onPost","reply","config","JSON","parse","data","message","accessToken","sign","expiresIn","onGet","Authorization","headers","split","verify","error","request","update","assign","settings","subscription","name","price","currency","proposalsLeft","templatesLeft","invitesLeft","adsLeft","hasAnalytics","hasEmailAlerts"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from 'src/utils/mock';\n\nconst JWT_SECRET = 'devias-top-secret-key';\nconst JWT_EXPIRES_IN = '2 days';\n\nconst db = {\n  user: {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/images/avatars/avatar_6.png',\n    bio: 'Sales Manager',\n    canHire: false,\n    country: 'USA',\n    email: 'katarina.smith@devias.io',\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Katarina',\n    isPublic: true,\n    lastName: 'Smith',\n    phone: '+40 777666555',\n    role: 'admin',\n    state: 'New York',\n    timezone: '4:32PM (GMT-4)'\n  }\n};\n\nmock.onPost('/api/account/login').reply((config) => {\n  const { email, password } = JSON.parse(config.data);\n\n  if (email !== 'admin@devias.io' || password !== 'admin') {\n    return [400, { message: 'Please check your email and password' }];\n  }\n\n  const { user } = db;\n\n  const accessToken = jwt.sign(\n    { id: user.id },\n    JWT_SECRET,\n    { expiresIn: JWT_EXPIRES_IN }\n  );\n\n  return [200, { user, accessToken }];\n});\n\nmock.onGet('/api/account/me').reply((config) => {\n  const { Authorization } = config.headers;\n\n  if (!Authorization) {\n    return [401, { message: 'Authorization token missing' }];\n  }\n\n  try {\n    const accessToken = Authorization.split(' ')[1];\n\n    const { id } = jwt.verify(accessToken, JWT_SECRET);\n\n    if (id !== db.user.id) {\n      return [401, { message: 'Invalid authorization token' }];\n    }\n\n    return [200, { user: db.user }];\n  } catch (error) {\n    return [401, { message: 'Invalid authorization token' }];\n  }\n});\n\nmock.onPost('/api/account/profile').reply((request) => {\n  const { update } = JSON.parse(request.data);\n\n  _.assign(db.user, update);\n\n  return [200, { user: db.user }];\n});\n\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\n\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Freelancer',\n    price: '5',\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});\n"]},"metadata":{},"sourceType":"module"}