{"ast":null,"code":"import _slicedToArray from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/context/SettingsContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { THEMES } from 'src/constants';\nimport { storeSettings } from 'src/utils/settings';\nvar SettingsContext = createContext();\nvar defaultSettings = {\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  theme: THEMES.ONE_DARK\n};\nexport function SettingsProvider(_ref) {\n  var settings = _ref.settings,\n      children = _ref.children;\n\n  var _useState = useState(settings || defaultSettings),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentSettings = _useState2[0],\n      setCurrentSettings = _useState2[1];\n\n  var handleSaveSettings = function handleSaveSettings() {\n    var updatedSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var mergedSettings = _.merge({}, currentSettings, updatedSettings);\n\n    setCurrentSettings(mergedSettings);\n    storeSettings(mergedSettings);\n  };\n\n  useEffect(function () {\n    document.dir = currentSettings.direction;\n  }, [currentSettings]);\n  return /*#__PURE__*/React.createElement(SettingsContext.Provider, {\n    value: {\n      settings: currentSettings,\n      saveSettings: handleSaveSettings\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, children);\n}\nSettingsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  settings: PropTypes.object\n};\nexport var SettingsConsumer = SettingsContext.Consumer;\nexport default SettingsContext;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/context/SettingsContext.js"],"names":["React","createContext","useState","useEffect","PropTypes","_","THEMES","storeSettings","SettingsContext","defaultSettings","direction","responsiveFontSizes","theme","ONE_DARK","SettingsProvider","settings","children","currentSettings","setCurrentSettings","handleSaveSettings","updatedSettings","mergedSettings","merge","document","dir","saveSettings","propTypes","node","isRequired","object","SettingsConsumer","Consumer"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,QAFF,EAGEC,SAHF,QAIO,OAJP;AAKA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,IAAMC,eAAe,GAAGP,aAAa,EAArC;AAEA,IAAMQ,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAE,KADW;AAEtBC,EAAAA,mBAAmB,EAAE,IAFC;AAGtBC,EAAAA,KAAK,EAAEN,MAAM,CAACO;AAHQ,CAAxB;AAMA,OAAO,SAASC,gBAAT,OAAkD;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACvD,kBAA8Cd,QAAQ,CAACa,QAAQ,IAAIN,eAAb,CAAtD;AAAA;AAAA,MAAOQ,eAAP;AAAA,MAAwBC,kBAAxB;;AAEA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAA0B;AAAA,QAAzBC,eAAyB,uEAAP,EAAO;;AACnD,QAAMC,cAAc,GAAGhB,CAAC,CAACiB,KAAF,CAAQ,EAAR,EAAYL,eAAZ,EAA6BG,eAA7B,CAAvB;;AAEAF,IAAAA,kBAAkB,CAACG,cAAD,CAAlB;AACAd,IAAAA,aAAa,CAACc,cAAD,CAAb;AACD,GALD;;AAOAlB,EAAAA,SAAS,CAAC,YAAM;AACdoB,IAAAA,QAAQ,CAACC,GAAT,GAAeP,eAAe,CAACP,SAA/B;AACD,GAFQ,EAEN,CAACO,eAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAEE,eADL;AAELQ,MAAAA,YAAY,EAAEN;AAFT,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGH,QANH,CADF;AAUD;AAEDF,gBAAgB,CAACY,SAAjB,GAA6B;AAC3BV,EAAAA,QAAQ,EAAEZ,SAAS,CAACuB,IAAV,CAAeC,UADE;AAE3Bb,EAAAA,QAAQ,EAAEX,SAAS,CAACyB;AAFO,CAA7B;AAKA,OAAO,IAAMC,gBAAgB,GAAGtB,eAAe,CAACuB,QAAzC;AAEP,eAAevB,eAAf","sourcesContent":["import React, {\n  createContext,\n  useState,\n  useEffect\n} from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { THEMES } from 'src/constants';\nimport { storeSettings } from 'src/utils/settings';\n\nconst SettingsContext = createContext();\n\nconst defaultSettings = {\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  theme: THEMES.ONE_DARK\n};\n\nexport function SettingsProvider({ settings, children }) {\n  const [currentSettings, setCurrentSettings] = useState(settings || defaultSettings);\n\n  const handleSaveSettings = (updatedSettings = {}) => {\n    const mergedSettings = _.merge({}, currentSettings, updatedSettings);\n\n    setCurrentSettings(mergedSettings);\n    storeSettings(mergedSettings);\n  };\n\n  useEffect(() => {\n    document.dir = currentSettings.direction;\n  }, [currentSettings]);\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        settings: currentSettings,\n        saveSettings: handleSaveSettings\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nSettingsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  settings: PropTypes.object\n};\n\nexport const SettingsConsumer = SettingsContext.Consumer;\n\nexport default SettingsContext;\n"]},"metadata":{},"sourceType":"module"}