{"ast":null,"code":"import _defineProperty from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/chat/ChatView/Sidebar/ThreadList/ThreadItem.js\";\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Avatar, Box, Chip, ListItem, ListItemAvatar, ListItemText, makeStyles } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nfunction contactSelector(state, thread, userId) {\n  var contacts = state.chat.contacts;\n  var contactId = thread.participantIds.filter(function (participantId) {\n    return participantId !== userId;\n  })[0];\n  return contacts.byId[contactId];\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    active: {\n      boxShadow: \"inset 4px 0px 0px \".concat(theme.palette.secondary.main),\n      backgroundColor: theme.palette.action.active\n    },\n    avatar: {\n      height: 40,\n      width: 40\n    },\n    unreadIndicator: {\n      marginTop: 2,\n      padding: 2,\n      height: 18,\n      minWidth: 18\n    }\n  };\n});\n\nfunction ThreadItem(_ref) {\n  var active = _ref.active,\n      thread = _ref.thread,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"active\", \"thread\", \"className\"]);\n\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.account;\n  }),\n      user = _useSelector.user;\n\n  var contact = useSelector(function (state) {\n    return contactSelector(state, thread, user.id);\n  });\n  var lastMessage = thread.messages[thread.messages.length - 1];\n  var lastMessageInfo = lastMessage ? \"\".concat(lastMessage.senderId === user.id ? 'Me:' : '', \" \").concat(lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body) : '';\n  return /*#__PURE__*/React.createElement(ListItem, Object.assign({\n    button: true,\n    className: clsx(_defineProperty({}, classes.active, active), className),\n    component: RouterLink,\n    to: \"/app/chat/\".concat(thread.key)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: \"Person\",\n    className: classes.avatar,\n    src: contact.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: contact.name,\n    primaryTypographyProps: {\n      noWrap: true,\n      variant: 'h6',\n      color: 'textPrimary'\n    },\n    secondary: lastMessageInfo,\n    secondaryTypographyProps: {\n      noWrap: true,\n      variant: 'body2',\n      color: 'textSecondary'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    ml: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, thread.unreadCount > 0 && /*#__PURE__*/React.createElement(Chip, {\n    className: classes.unreadIndicator,\n    color: \"secondary\",\n    size: \"small\",\n    label: thread.unreadCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })));\n}\n\nThreadItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  thread: PropTypes.object.isRequired\n};\nThreadItem.defaultProps = {\n  active: false,\n  className: ''\n};\nexport default ThreadItem;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/chat/ChatView/Sidebar/ThreadList/ThreadItem.js"],"names":["React","Link","RouterLink","PropTypes","clsx","Avatar","Box","Chip","ListItem","ListItemAvatar","ListItemText","makeStyles","useSelector","contactSelector","state","thread","userId","contacts","chat","contactId","participantIds","filter","participantId","byId","useStyles","theme","active","boxShadow","palette","secondary","main","backgroundColor","action","avatar","height","width","unreadIndicator","marginTop","padding","minWidth","ThreadItem","className","rest","classes","account","user","contact","id","lastMessage","messages","length","lastMessageInfo","senderId","contentType","body","key","name","noWrap","variant","color","unreadCount","propTypes","bool","string","object","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Box,\n  Chip,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  makeStyles\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\n\nfunction contactSelector(state, thread, userId) {\n  const { contacts } = state.chat;\n  const contactId = thread.participantIds.filter((participantId) => participantId !== userId)[0];\n\n  return contacts.byId[contactId];\n}\n\nconst useStyles = makeStyles((theme) => ({\n  active: {\n    boxShadow: `inset 4px 0px 0px ${theme.palette.secondary.main}`,\n    backgroundColor: theme.palette.action.active\n  },\n  avatar: {\n    height: 40,\n    width: 40\n  },\n  unreadIndicator: {\n    marginTop: 2,\n    padding: 2,\n    height: 18,\n    minWidth: 18\n  }\n}));\n\nfunction ThreadItem({\n  active,\n  thread,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { user } = useSelector((state) => state.account);\n  const contact = useSelector((state) => contactSelector(state, thread, user.id));\n\n  const lastMessage = thread.messages[thread.messages.length - 1];\n  const lastMessageInfo = lastMessage ? `${lastMessage.senderId === user.id ? 'Me:' : ''} ${lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body}` : '';\n\n  return (\n    <ListItem\n      button\n      className={clsx(\n        {\n          [classes.active]: active\n        },\n        className\n      )}\n      component={RouterLink}\n      to={`/app/chat/${thread.key}`}\n      {...rest}\n    >\n      <ListItemAvatar>\n        <Avatar\n          alt=\"Person\"\n          className={classes.avatar}\n          src={contact.avatar}\n        />\n      </ListItemAvatar>\n      <ListItemText\n        primary={contact.name}\n        primaryTypographyProps={{\n          noWrap: true,\n          variant: 'h6',\n          color: 'textPrimary'\n        }}\n        secondary={lastMessageInfo}\n        secondaryTypographyProps={{\n          noWrap: true,\n          variant: 'body2',\n          color: 'textSecondary'\n        }}\n      />\n      <Box\n        ml={2}\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"flex-end\"\n      >\n        {thread.unreadCount > 0 && (\n          <Chip\n            className={classes.unreadIndicator}\n            color=\"secondary\"\n            size=\"small\"\n            label={thread.unreadCount}\n          />\n        )}\n      </Box>\n    </ListItem>\n  );\n}\n\nThreadItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  thread: PropTypes.object.isRequired\n};\n\nThreadItem.defaultProps = {\n  active: false,\n  className: ''\n};\n\nexport default ThreadItem;\n"]},"metadata":{},"sourceType":"module"}