{"ast":null,"code":"import _classCallCheck from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"src/utils/axios\";\n\nvar Axios = require(\"axios\");\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    var _this = this;\n\n    _classCallCheck(this, AuthService);\n\n    this.setAxiosInterceptors = function (_ref) {\n      var onLogout = _ref.onLogout;\n      axios.interceptors.response.use(function (response) {\n        return response;\n      }, function (error) {\n        if (error.response && error.response.status === 401) {\n          _this.setSession(null);\n\n          if (onLogout) {\n            onLogout();\n          }\n        }\n\n        return Promise.reject(error);\n      });\n    };\n\n    this.loginWithEmailAndPassword = function (email, password) {\n      return new Promise(function (resolve, reject) {\n        Axios.post(\"http://localhost:3100/auth\", {\n          email: email,\n          password: password\n        }).then(function (response) {\n          // console.log(response);\n          response.data.user.avatar = \"/static/images/avatars/avatar_6.png\";\n\n          if (response.data.user) {\n            console.log(response.data);\n\n            _this.setSession(response.data.accessToken);\n\n            resolve(response.data.user);\n          } else {\n            reject(response.data.error);\n          }\n        }).catch(function (error) {\n          reject(error);\n        }); // axios.post('/api/account/login', { email, password })\n        //   .then((response) => {\n        //     if (response.data.user) {\n        //       this.setSession(response.data.accessToken);\n        //       resolve(response.data.user);\n        //     } else {\n        //       reject(response.data.error);\n        //     }\n        //   })\n        //   .catch((error) => {\n        //     reject(error);\n        //   });\n      });\n    };\n\n    this.loginInWithToken = function () {\n      return new Promise(function (resolve, reject) {\n        axios.get(\"/api/account/me\").then(function (response) {\n          if (response.data.user) {\n            resolve(response.data.user);\n          } else {\n            reject(response.data.error);\n          }\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    };\n\n    this.logout = function () {\n      _this.setSession(null);\n    };\n\n    this.setSession = function (accessToken) {\n      if (accessToken) {\n        localStorage.setItem(\"accessToken\", accessToken);\n        axios.defaults.headers.common.Authorization = \"Bearer \".concat(accessToken);\n      } else {\n        localStorage.removeItem(\"accessToken\");\n        delete axios.defaults.headers.common.Authorization;\n      }\n    };\n\n    this.getAccessToken = function () {\n      return localStorage.getItem(\"accessToken\");\n    };\n\n    this.isValidToken = function (accessToken) {\n      if (!accessToken) {\n        return false;\n      }\n\n      var decoded = jwtDecode(accessToken);\n      var currentTime = Date.now() / 1000;\n      return decoded.exp > currentTime;\n    };\n\n    this.isAuthenticated = function () {\n      return !!_this.getAccessToken();\n    };\n  }\n\n  _createClass(AuthService, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var accessToken = this.getAccessToken();\n\n      if (!accessToken) {\n        return;\n      }\n\n      if (this.isValidToken(accessToken)) {\n        this.setSession(accessToken);\n      } else {\n        this.setSession(null);\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nvar authService = new AuthService();\nexport default authService;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/services/authService.js"],"names":["jwtDecode","axios","Axios","require","AuthService","setAxiosInterceptors","onLogout","interceptors","response","use","error","status","setSession","Promise","reject","loginWithEmailAndPassword","email","password","resolve","post","then","data","user","avatar","console","log","accessToken","catch","loginInWithToken","get","logout","localStorage","setItem","defaults","headers","common","Authorization","removeItem","getAccessToken","getItem","isValidToken","decoded","currentTime","Date","now","exp","isAuthenticated","authService"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;IAEMC,W;;;;;;SACLC,oB,GAAuB,gBAAkB;AAAA,UAAfC,QAAe,QAAfA,QAAe;AACxCL,MAAAA,KAAK,CAACM,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACC,UAACD,QAAD;AAAA,eAAcA,QAAd;AAAA,OADD,EAEC,UAACE,KAAD,EAAW;AACV,YAAIA,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAAhD,EAAqD;AACpD,UAAA,KAAI,CAACC,UAAL,CAAgB,IAAhB;;AAEA,cAAIN,QAAJ,EAAc;AACbA,YAAAA,QAAQ;AACR;AACD;;AAED,eAAOO,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACA,OAZF;AAcA,K;;SAgBDK,yB,GAA4B,UAACC,KAAD,EAAQC,QAAR;AAAA,aAC3B,IAAIJ,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AAChCZ,QAAAA,KAAK,CAACiB,IAAN,CAAW,4BAAX,EAAyC;AAAEH,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,QAAQ,EAARA;AAAT,SAAzC,EACEG,IADF,CACO,UAACZ,QAAD,EAAc;AACnB;AACAA,UAAAA,QAAQ,CAACa,IAAT,CAAcC,IAAd,CAAmBC,MAAnB,GAA4B,qCAA5B;;AACA,cAAIf,QAAQ,CAACa,IAAT,CAAcC,IAAlB,EAAwB;AACvBE,YAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAQ,CAACa,IAArB;;AACA,YAAA,KAAI,CAACT,UAAL,CAAgBJ,QAAQ,CAACa,IAAT,CAAcK,WAA9B;;AACAR,YAAAA,OAAO,CAACV,QAAQ,CAACa,IAAT,CAAcC,IAAf,CAAP;AACA,WAJD,MAIO;AACNR,YAAAA,MAAM,CAACN,QAAQ,CAACa,IAAT,CAAcX,KAAf,CAAN;AACA;AACD,SAXF,EAYEiB,KAZF,CAYQ,UAACjB,KAAD,EAAW;AACjBI,UAAAA,MAAM,CAACJ,KAAD,CAAN;AACA,SAdF,EADgC,CAgBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA5BD,CAD2B;AAAA,K;;SA+B5BkB,gB,GAAmB;AAAA,aAClB,IAAIf,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AAChCb,QAAAA,KAAK,CACH4B,GADF,CACM,iBADN,EAEET,IAFF,CAEO,UAACZ,QAAD,EAAc;AACnB,cAAIA,QAAQ,CAACa,IAAT,CAAcC,IAAlB,EAAwB;AACvBJ,YAAAA,OAAO,CAACV,QAAQ,CAACa,IAAT,CAAcC,IAAf,CAAP;AACA,WAFD,MAEO;AACNR,YAAAA,MAAM,CAACN,QAAQ,CAACa,IAAT,CAAcX,KAAf,CAAN;AACA;AACD,SARF,EASEiB,KATF,CASQ,UAACjB,KAAD,EAAW;AACjBI,UAAAA,MAAM,CAACJ,KAAD,CAAN;AACA,SAXF;AAYA,OAbD,CADkB;AAAA,K;;SAgBnBoB,M,GAAS,YAAM;AACd,MAAA,KAAI,CAAClB,UAAL,CAAgB,IAAhB;AACA,K;;SAEDA,U,GAAa,UAACc,WAAD,EAAiB;AAC7B,UAAIA,WAAJ,EAAiB;AAChBK,QAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCN,WAApC;AACAzB,QAAAA,KAAK,CAACgC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,oBAAwDV,WAAxD;AACA,OAHD,MAGO;AACNK,QAAAA,YAAY,CAACM,UAAb,CAAwB,aAAxB;AACA,eAAOpC,KAAK,CAACgC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAArC;AACA;AACD,K;;SAEDE,c,GAAiB;AAAA,aAAMP,YAAY,CAACQ,OAAb,CAAqB,aAArB,CAAN;AAAA,K;;SAEjBC,Y,GAAe,UAACd,WAAD,EAAiB;AAC/B,UAAI,CAACA,WAAL,EAAkB;AACjB,eAAO,KAAP;AACA;;AAED,UAAMe,OAAO,GAAGzC,SAAS,CAAC0B,WAAD,CAAzB;AACA,UAAMgB,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;AAEA,aAAOH,OAAO,CAACI,GAAR,GAAcH,WAArB;AACA,K;;SAEDI,e,GAAkB;AAAA,aAAM,CAAC,CAAC,KAAI,CAACR,cAAL,EAAR;AAAA,K;;;;;WAxFlB,gCAAuB;AACtB,UAAMZ,WAAW,GAAG,KAAKY,cAAL,EAApB;;AAEA,UAAI,CAACZ,WAAL,EAAkB;AACjB;AACA;;AAED,UAAI,KAAKc,YAAL,CAAkBd,WAAlB,CAAJ,EAAoC;AACnC,aAAKd,UAAL,CAAgBc,WAAhB;AACA,OAFD,MAEO;AACN,aAAKd,UAAL,CAAgB,IAAhB;AACA;AACD;;;;;;AA+EF,IAAMmC,WAAW,GAAG,IAAI3C,WAAJ,EAApB;AAEA,eAAe2C,WAAf","sourcesContent":["import jwtDecode from \"jwt-decode\";\nimport axios from \"src/utils/axios\";\nconst Axios = require(\"axios\");\n\nclass AuthService {\n\tsetAxiosInterceptors = ({ onLogout }) => {\n\t\taxios.interceptors.response.use(\n\t\t\t(response) => response,\n\t\t\t(error) => {\n\t\t\t\tif (error.response && error.response.status === 401) {\n\t\t\t\t\tthis.setSession(null);\n\n\t\t\t\t\tif (onLogout) {\n\t\t\t\t\t\tonLogout();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Promise.reject(error);\n\t\t\t}\n\t\t);\n\t};\n\n\thandleAuthentication() {\n\t\tconst accessToken = this.getAccessToken();\n\n\t\tif (!accessToken) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isValidToken(accessToken)) {\n\t\t\tthis.setSession(accessToken);\n\t\t} else {\n\t\t\tthis.setSession(null);\n\t\t}\n\t}\n\n\tloginWithEmailAndPassword = (email, password) =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\tAxios.post(\"http://localhost:3100/auth\", { email, password })\n\t\t\t\t.then((response) => {\n\t\t\t\t\t// console.log(response);\n\t\t\t\t\tresponse.data.user.avatar = \"/static/images/avatars/avatar_6.png\";\n\t\t\t\t\tif (response.data.user) {\n\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t\tthis.setSession(response.data.accessToken);\n\t\t\t\t\t\tresolve(response.data.user);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(response.data.error);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t// axios.post('/api/account/login', { email, password })\n\t\t\t//   .then((response) => {\n\t\t\t//     if (response.data.user) {\n\t\t\t//       this.setSession(response.data.accessToken);\n\t\t\t//       resolve(response.data.user);\n\t\t\t//     } else {\n\t\t\t//       reject(response.data.error);\n\t\t\t//     }\n\t\t\t//   })\n\t\t\t//   .catch((error) => {\n\t\t\t//     reject(error);\n\t\t\t//   });\n\t\t});\n\n\tloginInWithToken = () =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\taxios\n\t\t\t\t.get(\"/api/account/me\")\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response.data.user) {\n\t\t\t\t\t\tresolve(response.data.user);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(response.data.error);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t});\n\n\tlogout = () => {\n\t\tthis.setSession(null);\n\t};\n\n\tsetSession = (accessToken) => {\n\t\tif (accessToken) {\n\t\t\tlocalStorage.setItem(\"accessToken\", accessToken);\n\t\t\taxios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\n\t\t} else {\n\t\t\tlocalStorage.removeItem(\"accessToken\");\n\t\t\tdelete axios.defaults.headers.common.Authorization;\n\t\t}\n\t};\n\n\tgetAccessToken = () => localStorage.getItem(\"accessToken\");\n\n\tisValidToken = (accessToken) => {\n\t\tif (!accessToken) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst decoded = jwtDecode(accessToken);\n\t\tconst currentTime = Date.now() / 1000;\n\n\t\treturn decoded.exp > currentTime;\n\t};\n\n\tisAuthenticated = () => !!this.getAccessToken();\n}\n\nconst authService = new AuthService();\n\nexport default authService;\n"]},"metadata":{},"sourceType":"module"}