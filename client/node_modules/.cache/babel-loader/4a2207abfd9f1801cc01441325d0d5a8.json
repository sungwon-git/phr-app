{"ast":null,"code":"var _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/chat/ChatView/ThreadDetails/index.js\";\nimport React, { useEffect, useRef } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Box, Divider, makeStyles } from '@material-ui/core';\nimport { markThreadAsSeen, getThread } from 'src/actions/chatActions';\nimport Toolbar from './Toolbar';\nimport Message from '../Message';\nimport MessageAdd from '../MessageAdd';\n\nfunction threadSelector(state, threadKey, history) {\n  var _state$chat = state.chat,\n      threads = _state$chat.threads,\n      contacts = _state$chat.contacts;\n  var user = state.account.user;\n  var thread = threads.byKey[threadKey]; // When starting a new thread, we don't have it in store\n  // So we can create a temporary new one where threadKey is the contact username\n\n  if (!thread) {\n    var contactId = contacts.allIds.filter( // eslint-disable-next-line no-underscore-dangle\n    function (_contactId) {\n      return contacts.byId[_contactId].username === threadKey;\n    })[0];\n\n    if (!contactId) {\n      history.push('/app/chat/new');\n    }\n\n    return {\n      key: threadKey,\n      type: 'ONE_TO_ONE',\n      // We might add GROUP type in future\n      participantIds: [contactId, user.id],\n      messages: []\n    };\n  }\n\n  return thread;\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: theme.palette.background.dark\n    }\n  };\n});\n\nfunction ThreadDetails() {\n  var _this = this;\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n\n  var _useParams = useParams(),\n      threadKey = _useParams.threadKey;\n\n  var history = useHistory();\n  var thread = useSelector(function (state) {\n    return threadSelector(state, threadKey, history);\n  });\n  var messagesRef = useRef(null);\n\n  function scrollMessagesToBottom() {\n    if (messagesRef.current) {\n      // eslint-disable-next-line no-underscore-dangle\n      messagesRef.current._container.scrollTop = messagesRef.current._container.scrollHeight;\n    }\n  }\n\n  useEffect(function () {\n    dispatch(getThread(threadKey));\n    dispatch(markThreadAsSeen(threadKey));\n  }, [dispatch, threadKey]);\n  useEffect(function () {\n    if (thread) {\n      scrollMessagesToBottom();\n    } // eslint-disable-next-line\n\n  }, [thread.messages]);\n\n  if (!thread) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    thread: thread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    p: 2,\n    ref: messagesRef,\n    component: PerfectScrollbar,\n    options: {\n      suppressScrollX: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, thread.messages.length > 0 && thread.messages.map(function (message) {\n    return /*#__PURE__*/React.createElement(Message, {\n      key: message.id,\n      message: message,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MessageAdd, {\n    thread: thread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ThreadDetails;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/chat/ChatView/ThreadDetails/index.js"],"names":["React","useEffect","useRef","useHistory","useParams","useSelector","useDispatch","PerfectScrollbar","Box","Divider","makeStyles","markThreadAsSeen","getThread","Toolbar","Message","MessageAdd","threadSelector","state","threadKey","history","chat","threads","contacts","user","account","thread","byKey","contactId","allIds","filter","_contactId","byId","username","push","key","type","participantIds","id","messages","useStyles","theme","root","flexGrow","display","flexDirection","backgroundColor","palette","background","dark","ThreadDetails","classes","dispatch","messagesRef","scrollMessagesToBottom","current","_container","scrollTop","scrollHeight","suppressScrollX","length","map","message"],"mappings":"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","sourcesContent":["import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport {\n  useHistory,\n  useParams\n} from 'react-router';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Divider,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  markThreadAsSeen,\n  getThread\n} from 'src/actions/chatActions';\nimport Toolbar from './Toolbar';\nimport Message from '../Message';\nimport MessageAdd from '../MessageAdd';\n\nfunction threadSelector(state, threadKey, history) {\n  const { threads, contacts } = state.chat;\n  const { user } = state.account;\n  const thread = threads.byKey[threadKey];\n\n  // When starting a new thread, we don't have it in store\n  // So we can create a temporary new one where threadKey is the contact username\n  if (!thread) {\n    const contactId = contacts.allIds.filter(\n      // eslint-disable-next-line no-underscore-dangle\n      (_contactId) => contacts.byId[_contactId].username === threadKey\n    )[0];\n\n    if (!contactId) {\n      history.push('/app/chat/new');\n    }\n\n    return {\n      key: threadKey,\n      type: 'ONE_TO_ONE', // We might add GROUP type in future\n      participantIds: [contactId, user.id],\n      messages: []\n    };\n  }\n\n  return thread;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.background.dark\n  }\n}));\n\nfunction ThreadDetails() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { threadKey } = useParams();\n  const history = useHistory();\n  const thread = useSelector((state) => threadSelector(state, threadKey, history));\n  const messagesRef = useRef(null);\n\n  function scrollMessagesToBottom() {\n    if (messagesRef.current) {\n      // eslint-disable-next-line no-underscore-dangle\n      messagesRef.current._container.scrollTop = messagesRef.current._container.scrollHeight;\n    }\n  }\n\n  useEffect(() => {\n    dispatch(getThread(threadKey));\n    dispatch(markThreadAsSeen(threadKey));\n  }, [dispatch, threadKey]);\n\n  useEffect(() => {\n    if (thread) {\n      scrollMessagesToBottom();\n    }\n    // eslint-disable-next-line\n  }, [thread.messages]);\n\n  if (!thread) {\n    return null;\n  }\n\n  return (\n    <div className={classes.root}>\n      <Toolbar thread={thread} />\n      <Divider />\n      <Box\n        flexGrow={1}\n        p={2}\n        ref={messagesRef}\n        component={PerfectScrollbar}\n        options={{ suppressScrollX: true }}\n      >\n        {thread.messages.length > 0 && thread.messages.map((message) => (\n          <Message\n            key={message.id}\n            message={message}\n          />\n        ))}\n      </Box>\n      <Divider />\n      <MessageAdd thread={thread} />\n    </div>\n  );\n}\n\nexport default ThreadDetails;\n"]},"metadata":{},"sourceType":"module"}