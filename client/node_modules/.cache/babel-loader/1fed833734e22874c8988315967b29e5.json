{"ast":null,"code":"import _toConsumableArray from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/mail/MailView/MailList/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Divider, makeStyles } from '@material-ui/core';\nimport { getMails } from 'src/actions/mailActions';\nimport Toolbar from './Toolbar';\nimport MailItem from './MailItem';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.dark\n    }\n  };\n});\n\nfunction MailList() {\n  var _this = this;\n\n  var classes = useStyles();\n  var params = useParams();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.mail;\n  }),\n      mails = _useSelector.mails;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedMails = _useState2[0],\n      setSelectedMails = _useState2[1];\n\n  var handleSelectAllMails = function handleSelectAllMails() {\n    setSelectedMails(mails.map(function (mail) {\n      return mail.id;\n    }));\n  };\n\n  var handleDeselectAllMails = function handleDeselectAllMails() {\n    setSelectedMails([]);\n  };\n\n  var handleSelectOneMail = function handleSelectOneMail(mailId) {\n    setSelectedMails(function (prevSelectedMails) {\n      if (!prevSelectedMails.includes(mailId)) {\n        return [].concat(_toConsumableArray(prevSelectedMails), [mailId]);\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  var handleDeselectOneMail = function handleDeselectOneMail(mailId) {\n    setSelectedMails(function (prevSelectedMails) {\n      return prevSelectedMails.filter(function (id) {\n        return id !== mailId;\n      });\n    });\n  };\n\n  useEffect(function () {\n    dispatch(getMails(params));\n  }, [dispatch, params]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    onDeselectAll: handleDeselectAllMails,\n    onSelectAll: handleSelectAllMails,\n    selectedMails: selectedMails.length,\n    mails: mails.allIds.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), mails.allIds.map(function (mailId) {\n    return /*#__PURE__*/React.createElement(MailItem, {\n      mail: mails.byId[mailId],\n      key: mailId,\n      onDeselect: function onDeselect() {\n        return handleDeselectOneMail(mailId);\n      },\n      onSelect: function onSelect() {\n        return handleSelectOneMail(mailId);\n      },\n      selected: selectedMails.includes(mailId),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    });\n  }));\n}\n\nexport default MailList;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/mail/MailView/MailList/index.js"],"names":["React","useState","useEffect","useParams","useDispatch","useSelector","Divider","makeStyles","getMails","Toolbar","MailItem","useStyles","theme","root","flexGrow","overflow","backgroundColor","palette","background","dark","MailList","classes","params","dispatch","state","mail","mails","selectedMails","setSelectedMails","handleSelectAllMails","map","id","handleDeselectAllMails","handleSelectOneMail","mailId","prevSelectedMails","includes","handleDeselectOneMail","filter","length","allIds","byId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Divider, makeStyles } from '@material-ui/core';\nimport { getMails } from 'src/actions/mailActions';\nimport Toolbar from './Toolbar';\nimport MailItem from './MailItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.dark\n  }\n}));\n\nfunction MailList() {\n  const classes = useStyles();\n  const params = useParams();\n  const dispatch = useDispatch();\n  const { mails } = useSelector((state) => state.mail);\n  const [selectedMails, setSelectedMails] = useState([]);\n\n  const handleSelectAllMails = () => {\n    setSelectedMails(mails.map((mail) => mail.id));\n  };\n\n  const handleDeselectAllMails = () => {\n    setSelectedMails([]);\n  };\n\n  const handleSelectOneMail = (mailId) => {\n    setSelectedMails((prevSelectedMails) => {\n      if (!prevSelectedMails.includes(mailId)) {\n        return [...prevSelectedMails, mailId];\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  const handleDeselectOneMail = (mailId) => {\n    setSelectedMails((prevSelectedMails) => prevSelectedMails.filter((id) => id !== mailId));\n  };\n\n  useEffect(() => {\n    dispatch(getMails(params));\n  }, [dispatch, params]);\n\n  return (\n    <div className={classes.root}>\n      <Toolbar\n        onDeselectAll={handleDeselectAllMails}\n        onSelectAll={handleSelectAllMails}\n        selectedMails={selectedMails.length}\n        mails={mails.allIds.length}\n      />\n      <Divider />\n      {mails.allIds.map((mailId) => (\n        <MailItem\n          mail={mails.byId[mailId]}\n          key={mailId}\n          onDeselect={() => handleDeselectOneMail(mailId)}\n          onSelect={() => handleSelectOneMail(mailId)}\n          selected={selectedMails.includes(mailId)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default MailList;\n"]},"metadata":{},"sourceType":"module"}