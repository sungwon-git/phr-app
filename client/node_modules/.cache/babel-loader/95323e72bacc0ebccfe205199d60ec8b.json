{"ast":null,"code":"import _defineProperty from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/reports/DashboardView/TeamTasks/TaskItem.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { ListItem, ListItemText, IconButton, Tooltip, makeStyles } from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport StackAvatars from 'src/components/StackAvatars';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    viewButton: {\n      marginLeft: theme.spacing(2)\n    }\n  };\n});\n\nfunction TaskItem(_ref) {\n  var task = _ref.task,\n      className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"task\", \"className\"]);\n\n  var classes = useStyles();\n  var deadline = 'N/A';\n  var critical = false;\n\n  if (task.deadline) {\n    var now = moment();\n    var deadlineMoment = moment(task.deadline);\n\n    if (deadlineMoment.isAfter(now) && deadlineMoment.diff(now, 'day') < 3) {\n      deadline = \"\".concat(deadlineMoment.diff(now, 'day'), \" days remaining\");\n      critical = true;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(ListItem, Object.assign({\n    className: clsx(classes.root, _defineProperty({}, classes.critical, critical), className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(ListItemText, {\n    className: classes.listItemText,\n    primary: task.title,\n    primaryTypographyProps: {\n      variant: 'h6',\n      noWrap: true\n    },\n    secondary: deadline,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StackAvatars, {\n    avatars: task.members,\n    limit: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"View task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.viewButton,\n    edge: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OpenInNewIcon, {\n    fontSize: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }))));\n}\n\nTaskItem.propTypes = {\n  className: PropTypes.string,\n  task: PropTypes.object.isRequired\n};\nexport default TaskItem;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/reports/DashboardView/TeamTasks/TaskItem.js"],"names":["React","PropTypes","clsx","moment","ListItem","ListItemText","IconButton","Tooltip","makeStyles","OpenInNewIcon","StackAvatars","useStyles","theme","root","viewButton","marginLeft","spacing","TaskItem","task","className","rest","classes","deadline","critical","now","deadlineMoment","isAfter","diff","listItemText","title","variant","noWrap","members","propTypes","string","object","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SACEC,QADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,QAMO,mBANP;AAOA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AAEA,IAAMC,SAAS,GAAGH,UAAU,CAAC,UAACI,KAAD;AAAA,SAAY;AACvCC,IAAAA,IAAI,EAAE,EADiC;AAEvCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,UAAU,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AADF;AAF2B,GAAZ;AAAA,CAAD,CAA5B;;AAOA,SAASC,QAAT,OAAgD;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,MAARC,IAAQ;;AAC9C,MAAMC,OAAO,GAAGV,SAAS,EAAzB;AAEA,MAAIW,QAAQ,GAAG,KAAf;AACA,MAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAIL,IAAI,CAACI,QAAT,EAAmB;AACjB,QAAME,GAAG,GAAGrB,MAAM,EAAlB;AACA,QAAMsB,cAAc,GAAGtB,MAAM,CAACe,IAAI,CAACI,QAAN,CAA7B;;AAEA,QAAIG,cAAc,CAACC,OAAf,CAAuBF,GAAvB,KAA+BC,cAAc,CAACE,IAAf,CAAoBH,GAApB,EAAyB,KAAzB,IAAkC,CAArE,EAAwE;AACtEF,MAAAA,QAAQ,aAAMG,cAAc,CAACE,IAAf,CAAoBH,GAApB,EAAyB,KAAzB,CAAN,oBAAR;AACAD,MAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,sBACE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAErB,IAAI,CACbmB,OAAO,CAACR,IADK,sBAEVQ,OAAO,CAACE,QAFE,EAESA,QAFT,GAGbJ,SAHa;AADjB,KAMMC,IANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAEC,OAAO,CAACO,YADrB;AAEE,IAAA,OAAO,EAAEV,IAAI,CAACW,KAFhB;AAGE,IAAA,sBAAsB,EAAE;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAH1B;AAIE,IAAA,SAAS,EAAET,QAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAcE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEJ,IAAI,CAACc,OADhB;AAEE,IAAA,KAAK,EAAE,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAkBE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,SAAS,EAAEX,OAAO,CAACP,UADrB;AAEE,IAAA,IAAI,EAAC,KAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CAlBF,CADF;AA6BD;;AAEDG,QAAQ,CAACgB,SAAT,GAAqB;AACnBd,EAAAA,SAAS,EAAElB,SAAS,CAACiC,MADF;AAEnBhB,EAAAA,IAAI,EAAEjB,SAAS,CAACkC,MAAV,CAAiBC;AAFJ,CAArB;AAKA,eAAenB,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport {\n  ListItem,\n  ListItemText,\n  IconButton,\n  Tooltip,\n  makeStyles\n} from '@material-ui/core';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport StackAvatars from 'src/components/StackAvatars';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  viewButton: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nfunction TaskItem({ task, className, ...rest }) {\n  const classes = useStyles();\n\n  let deadline = 'N/A';\n  let critical = false;\n\n  if (task.deadline) {\n    const now = moment();\n    const deadlineMoment = moment(task.deadline);\n\n    if (deadlineMoment.isAfter(now) && deadlineMoment.diff(now, 'day') < 3) {\n      deadline = `${deadlineMoment.diff(now, 'day')} days remaining`;\n      critical = true;\n    }\n  }\n\n  return (\n    <ListItem\n      className={clsx(\n        classes.root,\n        { [classes.critical]: critical },\n        className\n      )}\n      {...rest}\n    >\n      <ListItemText\n        className={classes.listItemText}\n        primary={task.title}\n        primaryTypographyProps={{ variant: 'h6', noWrap: true }}\n        secondary={deadline}\n      />\n      <StackAvatars\n        avatars={task.members}\n        limit={3}\n      />\n      <Tooltip title=\"View task\">\n        <IconButton\n          className={classes.viewButton}\n          edge=\"end\"\n        >\n          <OpenInNewIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n    </ListItem>\n  );\n}\n\nTaskItem.propTypes = {\n  className: PropTypes.string,\n  task: PropTypes.object.isRequired\n};\n\nexport default TaskItem;\n"]},"metadata":{},"sourceType":"module"}