{"ast":null,"code":"import _slicedToArray from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/sungwonjung/dev/nodejs/phr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sungwonjung/dev/nodejs/phr/client/src/views/management/CustomerDetailsView/Details/Emails.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { Box, Button, Card, CardContent, CardHeader, Divider, Table, TableBody, TableCell, TableRow, TextField, makeStyles } from '@material-ui/core';\nimport MaiIcon from '@material-ui/icons/MailOutline';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    actionIcon: {\n      marginRight: theme.spacing(1)\n    },\n    cell: {\n      padding: theme.spacing(1)\n    }\n  };\n});\nvar emailOptions = ['Resend last invoice', 'Send password reset', 'Send verification'];\n\nfunction Emails(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n  var isMountedRef = useIsMountedRef();\n\n  var _useState = useState(emailOptions[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      emailOption = _useState2[0],\n      setEmailOption = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      emails = _useState4[0],\n      setEmails = _useState4[1];\n\n  var getMails = useCallback(function () {\n    axios.get('/api/management/customers/1/emails').then(function (response) {\n      if (isMountedRef.current) {\n        setEmails(response.data.emails);\n      }\n    });\n  }, [isMountedRef]);\n  useEffect(function () {\n    getMails();\n  }, [getMails]);\n  return /*#__PURE__*/React.createElement(Card, Object.assign({\n    className: clsx(classes.root, className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Send emails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    name: \"option\",\n    onChange: function onChange(event) {\n      return setEmailOption(event.target.value);\n    },\n    select: true,\n    SelectProps: {\n      native: true\n    },\n    value: emailOption,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, emailOptions.map(function (option) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: option,\n      value: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, option);\n  })), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MaiIcon, {\n    className: classes.actionIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), \"Send email\")), emails && /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, emails.map(function (email) {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: email.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.cell,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, moment(email.createdAt).format('DD/MM/YYYY | HH:MM')), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.cell,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, email.description));\n  }))))));\n}\n\nEmails.propTypes = {\n  className: PropTypes.string,\n  emails: PropTypes.array\n};\nexport default Emails;","map":{"version":3,"sources":["/Users/sungwonjung/dev/nodejs/phr/client/src/views/management/CustomerDetailsView/Details/Emails.js"],"names":["React","useState","useCallback","useEffect","PropTypes","clsx","moment","Box","Button","Card","CardContent","CardHeader","Divider","Table","TableBody","TableCell","TableRow","TextField","makeStyles","MaiIcon","axios","useIsMountedRef","useStyles","theme","root","actionIcon","marginRight","spacing","cell","padding","emailOptions","Emails","className","rest","classes","isMountedRef","emailOption","setEmailOption","emails","setEmails","getMails","get","then","response","current","data","event","target","value","native","map","option","email","id","createdAt","format","description","propTypes","string","array"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useEffect\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport MaiIcon from '@material-ui/icons/MailOutline';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  actionIcon: {\n    marginRight: theme.spacing(1)\n  },\n  cell: {\n    padding: theme.spacing(1)\n  }\n}));\n\nconst emailOptions = [\n  'Resend last invoice',\n  'Send password reset',\n  'Send verification'\n];\n\nfunction Emails({ className, ...rest }) {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [emailOption, setEmailOption] = useState(emailOptions[0]);\n  const [emails, setEmails] = useState(null);\n\n  const getMails = useCallback(() => {\n    axios\n      .get('/api/management/customers/1/emails')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setEmails(response.data.emails);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getMails();\n  }, [getMails]);\n\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <CardHeader title=\"Send emails\" />\n      <Divider />\n      <CardContent>\n        <TextField\n          fullWidth\n          name=\"option\"\n          onChange={(event) => setEmailOption(event.target.value)}\n          select\n          SelectProps={{ native: true }}\n          value={emailOption}\n          variant=\"outlined\"\n        >\n          {emailOptions.map((option) => (\n            <option\n              key={option}\n              value={option}\n            >\n              {option}\n            </option>\n          ))}\n        </TextField>\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n          >\n            <MaiIcon className={classes.actionIcon} />\n            Send email\n          </Button>\n        </Box>\n        {emails && (\n          <Box mt={2}>\n            <Table>\n              <TableBody>\n                {emails.map((email) => (\n                  <TableRow key={email.id}>\n                    <TableCell className={classes.cell}>\n                      {moment(email.createdAt).format('DD/MM/YYYY | HH:MM')}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {email.description}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nEmails.propTypes = {\n  className: PropTypes.string,\n  emails: PropTypes.array\n};\n\nexport default Emails;\n"]},"metadata":{},"sourceType":"module"}